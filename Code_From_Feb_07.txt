
codon.tables <- list()
fred <- data.frame()
for (i in 1:25) {
  codon.tables[[i]] <- table(cdons[,c(1,3+use[i,3])])
  ce[i] <- dimnames(codon.tables[[i]])[2][[1]][which(colSums(codon.tables[[i]])==use[i,2])]
  mc[i] <- dimnames(codon.tables[[i]])[2][[1]][which(colSums(codon.tables[[i]])==max(colSums(codon.tables[[i]])))]
  pz[i] <- codon.tables[[i]][1,which(colSums(codon.tables[[i]])==use[i,2])]/lose
  po[i] <- codon.tables[[i]][2,which(colSums(codon.tables[[i]])==use[i,2])]/win
  fred <- data.frame(cod_expr =ce, maj_cod = mc, pc_zero=pz, pc_one=po) #data frame containing only 
}
fred_all <- cbind(as.data.frame(use),fred) # data frame containing column-bound "use" and "fred" data frames
rm(list = c('fred','ce','i','mc','po','pz'))

caga = matrix(c(572,lose-572,137,win-137),2,2) # is caa and cag together still interesting
caga
fisher.test(caga)
# caa and cag both produce glutamine
ifelse(cdons[,5]=='caa',T,F)
# 
# > fa
# pvalue Num_inst codon_num cod_expr maj_cod    pc_zero     pc_one
# 1  4.861294e-02      763         1      cct     cct 0.90949555 0.85714286
# 2  6.153508e-11      121         2      caa     cag 0.17655786 0.01142857
# 3  1.286376e-02      588         2      cag     cag 0.67210682 0.77142857
# 4  6.689417e-08      112        10      atc     ctc 0.16023739 0.02285714
# 5  4.226370e-05      392        10      ctc     ctc 0.42581602 0.60000000
# 6  4.593971e-02       70        30      aat     gat 0.09198813 0.04571429
# 7  1.114223e-04      108        46      ata     atg 0.14836795 0.04571429
# 8  4.717735e-05      588        46      atg     atg 0.66023739 0.81714286
# 9  1.360682e-02       45        46      ttg     atg 0.06231454 0.01714286
# 10 1.799821e-02      640        54      atc     atc 0.73590504 0.82285714
# 11 4.445557e-05       83        54      gtc     atc 0.11721068 0.02285714
# 12 2.894676e-03      450        63      ccc     ccc 0.55637982 0.42857143
# 13 3.771243e-03       65        63      ctc     ccc 0.06231454 0.13142857
# 14 1.410840e-03       43        66      aty     atc 0.03709199 0.10285714
# 15 4.360291e-02       96        68      ggg     gga 0.12462908 0.06857143
# 16 5.127272e-04      508        71      gct     gct 0.56824926 0.71428571
# 17 1.756632e-03      126        71      gtt     gct 0.16765579 0.07428571
# 18 2.597347e-02       57        75      gtg     gta 0.07715134 0.02857143
# 19 8.795699e-07      109        82      gcc     gtc 0.15430267 0.02857143
# 20 7.887435e-05      602        82      gtc     gtc 0.67804154 0.82857143
# 21 3.490277e-03      179        90      atg     ttg 0.23145401 0.13142857
# 22 6.803131e-03      566        90      ttg     ttg 0.64391691 0.75428571
# 23 3.957860e-02       47        92      caa     cag 0.06379822 0.02285714
# 24 2.175499e-02      453        93      att     att 0.51335312 0.61142857
# 25 2.333440e-02      276        93      ctt     att 0.34421365 0.25142857

#Below are some of the special values for the 'interesting codons-
# We certainly need to do this for all 25 such codon expressions

#i1=ifelse(cdons[,5]=='caa',T,F)
i2=ifelse(cdons[,5]=='caa',T,F)
i3=ifelse(cdons[,5]=='cag',T,F)
i4= ifelse(cdons[,13]=='atc',T,F)
i5 = ifelse(cdons[,13] == 'ctc',T,F)
i19 = ifelse(cdons[,85]== 'gcc',T,F)
i20 = ifelse(cdons[,85] == 'gtc',T,F)
# idea perhaps we can run a mixed effect model using vl and cd4 as the hidden variables.

# Below is a tree with response as a categorical variable-

yuri = data.frame(cbind(as.factor(cd[,1]),cd[,2:3]),i2,i3,i4,i5)
names(yuri)[1]= 'win'
ty = tree(win~.,data = yuri)
# remember to see the output, just type the object 'ty'
# to see the plot, plot(ty); text(ty)
library(randomForest)
tyf = randomForest(win~.,data = yuri,importance = T)
importance(tyf)
varImpPlot(tyf)
yuri2 = data.frame(yuri,i19,i20)
ty2 = tree(win~.,data = yuri2)
plot(ty2);text(ty2)